<?php
/**
 * Created by PhpStorm.
 * User: zhangxiaohei
 * Date: 2019/12/2
 * Time: 21:07
 */

namespace app\member\controller;


use app\common\controller\Common;
use app\common\library\CryptAes;
use app\common\library\enum\CodeEnum;
use app\common\model\Ms;
use app\common\model\MsWhiteIp;
use app\common\model\UserModel;
use think\Controller;
use think\Db;
use think\Request;
use think\Cookie;

//基类
class Base extends Common
{

    protected $agent;
    protected $agent_id;
    protected $children = [];
    protected $noLogin = [
        'apidoc',
        'daifudoc'
    ];

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $agent_id = intval(session('agent_id'));
        if (false == $this->gateVisiteIp($agent_id)) {
          $this->error('当前ip访问受限,禁止登陆', url('Login/index'));
        }

        if (!in_array($this->request->action(), $this->noLogin)){
            if (!$agent_id) {
                $this->redirect(url('Login/index'));
            }
            $user = Ms::where(['userid' => $agent_id])->find();

            if (!$user) {
                $this->redirect(url('Login/index'));
            }

            $admin_status = Db::name('admin')->where('id',$user['admin_id'])->value('status');

            if ($admin_status != 1){
                session('agent_id', null);
                cookie('token',null);
                $this->error('当前平台状态异常,禁止登陆', url('member/login/index'));
            }

            if ($user['status'] != '1') {
                session('agent_id', null);
                $this->error('当前账号被冻结,禁止登陆', url('member/login/index'));
            }


            $ms_single_account_login = getAdminPayCodeSys('ms_single_account_login', '256', $user['admin_id']) ?? 2;

            if ($ms_single_account_login == 1){
                if (cookie('token') != $user['cookie_token']) {
                    session(null);
                    $this->redirect(url('Login/index'));
                }
            }

            $this->agent    = $user;
            $this->agent_id = $user['userid'];

            $this->assign('level',$user['level']);
            $this->assign('agent', $this->agent);
            $this->assign('agent_id', $this->agent_id);
            $this->assign('is_daifu', $user['is_daifu']);
            $this->assign('money', $user['money']);
            $this->assign('work_status', $user['work_status']);
            $request = Request::instance();
            $this->assign('request', $request);
        }
    }
    



    public function daifu_order_refresh_status(){
        $status = $this->request->param('status');
        if ($status == 1){
            Cookie::set('daifu_order_refresh_status',1);
//            $this->assign('time','30');
        }else{
            Cookie::set('daifu_order_refresh_status',0);
        }
    }

    public function yhk_order_refresh(){
        $status = $this->request->param('status');
        if ($status == 1){
            Cookie::set('yhk_order_refresh',1);
//            $this->assign('time','30');
        }else{
            Cookie::set('yhk_order_refresh',0);
        }
    }



    public function uid_orders_refresh(){
        $status = $this->request->param('status');
        if ($status == 1){
            Cookie::set('uid_orders_refresh',1);
//            $this->assign('time','30');

        }else{
            Cookie::set('uid_orders_refresh',0);
        }
    }





    /**
     * 判断码商访问ip
     * @param $msId
     */
    protected function gateVisiteIp($msId)
    {
        $MsWhiteIp    = new MsWhiteIp();
        $map['ms_id'] = $msId;
        if ($MsWhiteIp->where($map)->count()) {
            //如果有设置访问白名单
            $aesKey            = config('aes_key', 'kqwwFRmKyloO');
            $aes               = new CryptAes($aesKey);
            $msWhiteIp         = new MsWhiteIp;
            $encrypt_ip        = $aes->encrypt(clientIp());
            $map['encrypt_ip'] = $encrypt_ip;
            if ($MsWhiteIp->where($map)->count() == 0) {
                //不在白名单内
                return false;
            }
        }
        return true;
    }

}
